"D:\Program Files\Java\jdk1.8.0_141\bin\java" "-javaagent:D:\Program Files\JetBrains\IntelliJ IDEA Community Edition 2017.2\lib\idea_rt.jar=55259:D:\Program Files\JetBrains\IntelliJ IDEA Community Edition 2017.2\bin" -Dfile.encoding=UTF-8 -classpath "D:\Program Files\Java\jdk1.8.0_141\jre\lib\charsets.jar;E:\Java\helloWorld\out\production\helloWorld" com.company.dog


1，java -classpath "E:\Java\helloWorld\src" com.company.dog

2，javac -encoding utf8 src\com\company\dog.java











-----------------------------反射------------------------------------------
反射是一种动态获取信息以及动态调用对象方法的机制。在程序运行状态中，通过反射能够知道某个类具有哪些属性和方法；能够访问某一个对象的方法和属性。

具体来说，反射机制主要提供了以下功能：

在运行时判断任意一个对象所属的类；
在运行时构造任意一个类的对象；
在运行时判断任意一个类所具有的成员变量和方法；
在运行时调用任意一个对象的方法；
生成动态代理。

-----------------------------抽象类和接口的比较------------------------------------------
相同点：
都不能被实例化
都包含抽象方法，这些抽象方法用于描述系统能提供哪些服务，而这些服务是由子类来提供实现的
在系统设计上，两者都代表系统的抽象层，当一个系统使用一棵继承树上的类时，应该尽量把引用变量声明为继承树的上层抽象类型，这样可以提高两个系统之间的松耦合

不同点：
在抽象类中可以为部分方法提供默认的实现，从而避免在子类中重复实现它们；
抽象类不支持多继承。
接口不能提供任何方法的实现，支持多继承。
接口代表接口定义者和接口实现者的一种契约；
抽象类和具体类一般而言是一种is-a的关系，即两者在概念本质上是不同的。

-----------------------------static------------------------------------------
类的成员变量中，用static修饰的变量称为静态变量或者类变量，而没有用static修饰的变量则是普通变量。

对于普通成员变量，每创建一个该类的实例就会创建该成员变量的一个拷贝，分配一次内存。由于成员变量是和类的实例绑定的，所以需要通过对象名进行访问，而不能直接通过类名对它进行访问。

而对于静态变量在内存中只有一份，Java虚拟机（JVM）只为静态变量分配一次内存，在加载类的过程中完成静态变量的内存分配。由于静态变量属于类，与类的实例无关，因而可以直接通过类名访问这类变量。

-------------------------------堆和栈----------------------------------------
堆和栈都是Java中常用的存储结构，都是内存中存放数据的地方：

在方法中定义的基本类型变量和引用类型变量，其内存分配在栈上，变量出了作用域（即定义变量的代码块）就会自动释放

堆内存主要作用是存放运行时通过new操作创建的对象

-----------------------------基本类型------------------------------------------
Java语言提供了八种基本类型，其中包括六种数字类型（四种整数型，两种浮点型），一种字符类型，还有一种布尔型。

-------------------------------依赖注入----------------------------------------
Spring最重要的两个核心功能是依赖注入（DI，Dependency Injection）和面向切面编程（AOP，Aspect Oriented Programming）。其中DI用于管理Java对象之间的依赖关系，AOP用于解耦业务代码和公共服务代码（如日志，安全，事务等）。DI和AOP能够让代码更加简单，具有良好的松耦合特性和可测试性，极大地简化开发。理解这两者是使用Spring框架的基础。Spring的核心思想依赖注入
面向切面编程（AOP）基于POJO的编程模型预置的模板代码（如Spring JDBC）依赖注入的基本原理
依赖注入的优点
依赖注入如何实现依赖注入的使用
基于XML的装配方式
基于Java Configuration的装配方式自动装配多种装配方式的混用处理装配的歧义如何注入属性值

--------------------------Set和List的区别---------------------------------------------
1. Set 接口实例存储的是无序的，不重复的数据。List 接口实例存储的是有序的，可以重复的元素。
2. Set检索效率低下，删除和插入效率高，插入和删除不会引起元素位置改变 <实现类有HashSet,TreeSet>。
3. List和数组类似，可以动态增长，根据实际存储的数据的长度自动增长List的长度。查找元素效率高，插入删除效率低，因为会引起其他元素位置改变 <实现类有ArrayList,LinkedList,Vector> 。















