CREATE TABLE `MYSQL tinyint smallint mediumint int bigint 备忘录` (
  `tinyint` tinyint(3) unsigned NOT NULL DEFAULT 0 COMMENT 'tinyint：1字节 不带符号：0~255',
  `smallint` smallint(5) unsigned NOT NULL DEFAULT 0 COMMENT 'smallint：2字节 不带符号：0~65535',
  `mediumint` mediumint(8) unsigned NOT NULL DEFAULT 0 COMMENT 'mediumint：3字节 不带符号：0~16777215',
  `int` int(10) unsigned NOT NULL DEFAULT 0 COMMENT 'int：4字节 不带符号：0~4294967295',
  `bigint` bigint(20) unsigned NOT NULL DEFAULT 0 COMMENT 'bigint：8字节 不带符号：0~18446744073709551615',
  `tinyint` tinyint(4) NOT NULL DEFAULT 0 COMMENT 'tinyint：1字节 带符号：-128~127',
  `smallint` smallint(6) NOT NULL DEFAULT 0 COMMENT 'smallint：2字节 带符号：-32768~32767',
  `mediumint` mediumint(8) NOT NULL DEFAULT 0 COMMENT 'mediumint：3字节 带符号：-8388608~8388607',
  `int` int(11) NOT NULL DEFAULT 0 COMMENT 'int：4字节 带符号：-2147483648~2147483647',
  `bigint` bigint(20) NOT NULL DEFAULT 0 COMMENT 'bigint：8字节 带符号：-9223372036854775808~9233372036854775807',
) ENGINE=MYSQL COMMENT='MYSQL tinyint smallint mediumint int bigint 备忘录';

---------------------------------------------------------------------

mysql注入 - test' or 1='1

1，show processlist;
	> 查看全部执行的命令
	
2，explain select * from right_table;

3，inner join vs left join vs right join
	> inner join 跟 where id=id 效率基本一致

4，嵌套查询
	> select * from left_table where name in (select name from right_table);	
	
5，union 和 union all 
	> union 会进行重复的内容筛选
	> union all 不会筛选重复，这样直接合并表，效率提高。
	
6，mysql 访问本地系统：mysql -h127.0.0.1

-----------------------------------------------------------------------

插入数据库的三种做法。
insert into table_name -> 插入表
insert ignore into table_name -> 插入表，但不会报错，如果存在重复键则忽略掉
replace into table_name -> 插入表，如果存在重复键则替换掉

-----------------------------------------------------------------------

索引分单列索引和组合索引。单列索引，即一个索引只包含单个列，一个表可以有多个单列索引，但这不是组合索引。
组合索引，即一个索引包含多个列。

创建索引时，你需要确保该索引是应用在SQL 查询语句的条件(一般作为 WHERE 子句的条件)。

实际上，索引也是一张表，该表保存了主键与索引字段，并指向实体表的记录。
索引也会有它的缺点：虽然索引大大提高了查询速度，同时却会降低更新表的速度，如对表进行INSERT、UPDATE和DELETE。因为更新表时，MySQL不仅要保存数据，还要保存一下索引文件。


??????
mysql字段类型为char类型，建立索引但未使用原因。---> "不是char类型不能走索引，而是查询的时候必须要加引号，说明这是个字符串"
-----------------------------------------------------------------------

InnoDB中的锁类型
	InnoDB引擎中的锁类型按照独占形式可以分为共享锁和排它锁（还有意向性共享锁和意向性排它锁）；
	按照锁定数据的范围可以分为行级锁（其它引擎中还有页级锁的定义）、间隙锁、间隙复合锁？？和表锁；
	为了保证锁的粒度能够至上而下传递，InnoDB中还设计有不能被用户干预的意向共享锁和意向排它锁。


锁类型	共享锁S	排它锁X
共享锁S	不互斥：多个共享锁不会相互影响相互等待	互斥：如果某个资源要加共享锁，则需要等待到资源上的排它锁配解除后，才能进行这个操作
排它锁X	互斥：如果资源要加排它锁，则需要等待到资源上所有共享锁都被解除后，才能进行这个操作	互斥：如果某个资源要加排它锁，则需要等待到资源上的排它锁配解除后，才能进行这个操作

5-2-3、Extra概要说明
	Using index：使用了索引
	Using where 和 Using index condition：此where关键字并不是SQL查询语句中的where关键字
	Using temporary：Mysql中的数据引擎需要建立临时表进行中间结果的记录，才能完成查询操作。一旦在Extra字段中出现了“Using temporary”提示，一般来说这条子查询就需要重点优化。
	Using filesort：Mysql服务无法直接使用索引完成排序时，就需要动用一个内存空间甚至需要磁盘交换动作辅助才能完成排序操作。
	
	
	
	
	
	
	
	
	
	
	
	
